name: Build wheels and deploy to PyPI

on:
  release:
    types: [ published ]

jobs:
  build_wheels:
    if: ${{ github.repository == 'pydicom/pylibjpeg-openjpeg' }}
    name: Build wheels for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    env:
      CIBW_BUILD: "cp3*-*"
      CIBW_SKIP: "cp35-*"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.9]

    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true

    - uses: actions/setup-python@v2
      name: Install Python
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel==1.10.0

    - name: Build sdist
      run: |
         python setup.py sdist

    - name: Build wheels
      run: |
        python --version
        python -m cibuildwheel --output-dir dist

    - uses: actions/upload-artifact@v2
      with:
        name: wheels
        path: ./dist

  # The pypi upload fails with non-linux containers, so grab the uploaded
  #     artifacts and run using those
  # See: https://github.com/pypa/gh-action-pypi-publish/discussions/15
  deploy:
    if: ${{ github.repository == 'pydicom/pylibjpeg-openjpeg' }}
    name: Upload wheels to PyPI
    needs:
    - build_wheels
    runs-on: ubuntu-latest

    steps:
    - name: Download the wheels
      uses: actions/download-artifact@v2
      with:
        name: wheels
        path: dist/

    #- name: Publish package to Test PyPi
    #  uses: pypa/gh-action-pypi-publish@master
    #  with:
    #    user: __token__
    #    password: ${{ secrets.TEST_PYPI_PASSWORD }}
    #    repository_url: https://test.pypi.org/legacy/

    - name: Publish package to PyPi
      uses: pypa/gh-action-pypi-publish@master
      with:
        user: __token__
        password: ${{ secrets.PYPI_PASSWORD }}

  conda:
    if: ${{ github.repository == 'wvxvw/pylibjpeg-openjpeg' }}
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.7, 3.8, 3.9]
    name: Upload Release to Anaconda
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v2
      with:
        submodules: true
        fetch-depth: 0
    - uses: actions/setup-python@v2
      name: Install Python
      with:
        python-version: ${{ matrix.python-version }}

    - run: python -m pip install -U pip
    - run: python -m pip install wheel numpy cython
    - run: python ./setup.py bdist_wheel

    - run: python ./scripts/gen-conda-recipe.py
    - name: Set up Anaconda build
      uses: s-weigand/setup-conda@v1
      with:
        conda-channels: wvxvw
    - run: conda install conda-build anaconda-client conda-verify numpy cython
    - run: conda build -c wvxvw --output-folder ./dist ./conda-pkg/
    - run: >
        ANACONDA_API_TOKEN=${{ secrets.ANACONDA_TOKEN }}
        anaconda upload --label main ./dist/linux-64/*.tar.bz2
      if: ${{ matrix.os == 'ubuntu-latest' }}
    - run: >
        ANACONDA_API_TOKEN=${{ secrets.ANACONDA_TOKEN }}
        anaconda upload --label main ./dist/osx-64/*.tar.bz2
      if: ${{ matrix.os == 'macos-latest' }}
    - run: |
        $env:ANACONDA_API_TOKEN = "${{ secrets.ANACONDA_TOKEN }}"
        anaconda upload --label main ./dist/win-64/*.tar.bz2
      if: ${{ matrix.os == 'windows-latest' }}
